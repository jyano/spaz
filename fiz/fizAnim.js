w.ps =  tw.pos
w.iGP= tw.ignore
b2d.p()
sp.p = function(an){var sp=this

    if(U(an)){sp.play()}
    else {sp.gotoAndPlay(an)}
    return sp
}
sp.s= s.P= function(an){var sp=this
    if(U(an)){sp.stop()}
    else {sp.gotoAndStop(an)}
    return sp
}
sp.N=  function(n){ this.advance(n); return this }
sp.as=function(){

    return this.spriteSheet.getAnimations()
}
sp.a= function(){return this.currentAnimation }
sp.f= function(f){var g=G(arguments)
    if(U(f)){return g.p? this.currentFrame : this.currentAnimationFrame }
    if(g.p){ this.currentFrame = f }
    else {this.currentAnimationFrame = f}
    return this
}
sp.r = _.gS(sp,'framerate')
sp.e= function(fn){fn=fn||function(){n = N(window['n'], 0); $l('frame! '+ n++)}
    this.on('animationend', fn)
    return this
}
w.th= w.thrust=function(c,x,y,r){
    return this.D(N(x,600), N(y,500), c|| 'b', N(r,40)).cn('thrust')
}
w.PackThruster= w.pack=function(ani){

    var th = w.th(600, 500,'b',100).C("X")
        .r(1).fR()

    th.Sp( Pack, 0, 0, .8 )

    return th.p(ani||'f1')
}
b.p= b.play = function (a, b, c, d) {
    if(O(this.sp())){this.sp().p(a, b, c, d)}
    return this
}
b.s= b.stop=function (a, b, c, d) {
    if(O(this.sp())){ this.sp().s(a,b,c,d) }
    return this
}
cjs.sSU = cjs.SpriteSheetUtils
sS.flp=sS.addFlipped=function(a, b, c){
    cjs.sSU.addFlippedFrames(this,  a||true, b||false, c||false )
    return this
}
T.tx=function(){}
b.dr=function(dr){
    if(U(dr)){return this.direction}
    this.direction=dr; return this
}
i.dr=function(dr){
    if(U(dr)){return this.direction}
    this.direction=dr; return this
}
i.nm=function(dr){
    if(U(dr)){return this.name}
    this.name=dr; return this
}
// Hit testing the screen width, otherwise our sprite would disappear //
// We've reached the right side of our screen
// We need to walk left now to go back to our initial position
//sS.addFlipped(true, false, false)// walk_h has been generated by addFlippedFrames and// contained the right facing animations
//T.f(40)
ct.reset = function () {
    this.St().removeAllChildren()
    T.removeAllListeners()
}
//sprite.shadow = new createjs.Shadow("#454", 10, 15, 14)
//spriteUrl = "/assets/sprites/metalslug_mummy37x45.png"
//sprite always assumed to start facing right (and flipping it horizontqlly is the left) - so i must draw facing right
old=function(){
    b.sp=function(){var b=this, g=G(arguments),o
        b._sp=b._sp||[]
        if(g.u){
            return  b._sp[0]?_.l(b._sp).i:null}
        //if(O(g[0])){
        g.e(function(g){
            b._sp.push(g)
        })
        //}
        return b
    }

    b.bSx=  function(i,sc,a,x,y){var b=this, w=b.W(),
        g=G(arguments)//b.img=b.bindSprite=
        $l('welcome to b.bS ')
        if(S(i)){
            $l('if(S(i))')
            w.s.bm(i,
                function(bm){
                    b.bS('guy')
                    b.C('z')
                    //b.b({ i:bm,  a:a, sc:sc })
                })
        }
        else {
            $l('else')
            b.bS2.apply(b,g)
        }
        return b
    }

    THRUSTSCROLL = function(){z()

        // s = cjs.stage('green', 1000).A()

        //spriteUrl = "/assets/sprites/metalslug_mummy37x45.png"

        w = b2.mW({grav:0})

        p = w.player('thrust')
        //sp = cjs.sprite( Mummy ).drag()

        // w.s.A( sp )

        // sp.sXY( 2 ).XY( 200 )

        //  sp.gotoAndPlay('walk')


        // sp.rXY( 20, 22 )

        // b = b2.box( 100, 100, 50, 88).uD('mummy')

        // b.bindSprite2(sp)

        direction='right'

        cjs.tick(function(){


            w.eachBody(function(body){
                if(body.uD()!='player'){

                    body.X(  body.X()+ p.X()  )

                } })

        })



        tr=w.A( b2.dynamicDef(), b2.triangleFixt    )




        moveLeft=function(){

            w.eachBody(function(body){
                if(body.uD()!='player'){body.X( body.X()+10  )   } })

        }
        moveRight=function(){

            w.eachBody(function(body){
                if(body.uD()!='player'){ body.X( body.X()-10  )   } })

        }
    }
    moveEachBodyButGuy=function() {

        $.kD('l', function () {
            w.eachBody(function (body) {
                if (body.K() != 'guy') {    body.X(body.X()+20)   }})})


        $.kD('r', function () {
            w.eachBody(function (body) {
                if (body.K() != 'guy') {

                    body.X( body.X() - 20)
                }
            })
        })


        $.kD('d', function () {
            w.eachBody(function (body) {
                if (body.K() != 'guy') {
                    body.Y(body.Y() - 20)
                }
            })
        })


        $.kD('u', function () {
            w.eachBody(function (body) {
                if (body.K() != 'guy') {
                    body.Y(body.Y() + 20)
                }
            })
        })

    }
    BUTME=function(){

        w = b2d.W({


            grav:0,   walls:[]


        })



        //p = w.player('thrust').XY(500,100)

        w.brick(100,300,200,30).rot(30)
        w.brick(400,200,400,100).rot(30)

        g= w.box(400,300, 30, 30).bindSprite('guy').K('guy')

        moveEachBodyButGuy()

        cjs.tick(function(){
            // w.each(function(b){ b.rot(  b.rot() + 10) })


            g.XY(400,300)

        })



    }


    BUTMEBETTER=function(){z()



        w = b2.mW({
            grav:0,
            walls:[]
        })


        //p = w.player('thrust').XY(500,100)

        w.bumper(200,200,100)
        w.bumper(600,300,100)

        g= w.box(400,300, 30, 30).bindSprite('guy').K('guy')

        moveEachBodyButGuy()

    }


}
sSB.Z = function (sc) {
    if (U(sc)) {return this.scale}
    this.scale = sc;
    return this
}
sSB.maxW = function (sc) {
    if (U(sc)) {
        return this.maxWidth
    }
    this.maxWidth = sc;
    return this
}
sSB.A = function (mc) {
    this.addMovieClip(mc)
    return this
}
sSB.complete = function (func) {
    this.on("complete", func)
    return this
}
sSB.async = function (funcNum, num) {
    if (F(funcNum)) {
        this.complete(funcNum)
        this.buildAsync(num)
    }

    else {
        this.buildAsync(funcNum)
    }


    return this
}
cjs.sSB= cjs.builder = cjs.spriteSheetBuilder =   cjs.ssB = cjs.ssb = function (mc) {

    var sSB = new cjs.SpriteSheetBuilder()
    if (mc) { sSB.A(mc) }
    return sSB
}
meSprite=function(){
    return $Sp( $SS ).XY(10).drag()
}

