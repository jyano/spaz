__dirname
    is always the directory of the file in which is used
    returns the directory name of the directory containing the javascript source code file

./
    fs.readFileSync translates  ./ in the cwd
    require translates ./ to the directory of the file in which it was called


process.cwd()
    returns the current working directory,
        i.e. the directory from which you invoked the node command.


PATH MODULE

The first function worth mentioning is path.normalize. This function takes a path (in the form of a string) and strips it of duplicate slashes and normalizes directory abbreviations, like '.' for 'this directory' and '..' for 'one level up'. For example:

> var path = require('path');
> path.normalize('/a/.///b/d/../c/')
'/a/b/c/'

A closely related function to normalize is join. This function takes a variable number of arguments, joins them together, and normalizes the path.

> var path = require('path');
> path.join('/a/.', './//b/', 'd/../c/')
'/a/b/c'

A possible use of join is to manipulate paths when serving urls:

> var path = require('path');
> var url = '/index.html';
> path.join(process.cwd(), 'static', url);
'/home/nico/static/index.html'

> var path = require('path')
> var a = '/a/b/c.html'
> path.basename(a)
'c.html'
> path.extname(a)
'.html'
> path.dirname(a)
'/a/b'

Note that basename has an optional second parameter that will strip out the extension if you pass the correct extension.

> var path = require('path')
> var a = '/a/b/c.html'
> path.basename(a, path.extname(a))
'c'


> var path = require('path')
    > path.exists('/etc', function(exists){console.log("Does the file exist?", exists)})
    > Does the file exist? true

    > path.existsSync('/etc')
    true